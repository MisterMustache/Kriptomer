/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package me.sola.kriptomer;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author TheGoodSpice
 */
public class AddKripto extends javax.swing.JFrame {

    /**
     * Creates new form AddKripto
     */
    MainWindow mainWindow;

    public AddKripto(Object mainWindow) {
        this.mainWindow = (MainWindow) mainWindow;
        initComponents();
        opozorila.setText("");
        
        kriptovaluta.removeAllItems();
        kriptovaluta.addItem("BTC - Bitcoin");
        kriptovaluta.addItem("ETH - Ethereum");
        kriptovaluta.addItem("BCH - Bitcoin Cash");
        kriptovaluta.addItem("XLM - Stellar Lumens");
        kriptovaluta.addItem("OMG - OMG Network");
        kriptovaluta.addItem("ZRX - 0x");
        kriptovaluta.addItem("XRP - Ripple");
        kriptovaluta.addItem("LTC - litecoin");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        naslov = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        shrani = new javax.swing.JButton();
        preklici = new javax.swing.JButton();
        opozorila = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        ime_kriptovaluta = new javax.swing.JLabel();
        vlozek_tekst = new javax.swing.JLabel();
        kolicina_tekst = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        kriptovaluta = new javax.swing.JComboBox<>();
        vlozek = new javax.swing.JTextField();
        kolicina = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        naslov.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        naslov.setText("Dodajanje nove valute");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addComponent(naslov)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(naslov, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        shrani.setBackground(new java.awt.Color(102, 153, 255));
        shrani.setForeground(new java.awt.Color(255, 255, 255));
        shrani.setText("Shrani");
        shrani.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shraniActionPerformed(evt);
            }
        });

        preklici.setBackground(new java.awt.Color(255, 153, 153));
        preklici.setForeground(new java.awt.Color(255, 255, 255));
        preklici.setText("Prekliči");
        preklici.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prekliciActionPerformed(evt);
            }
        });

        opozorila.setForeground(new java.awt.Color(255, 0, 51));
        opozorila.setText("opozorila");
        opozorila.setMaximumSize(new java.awt.Dimension(320, 48));
        opozorila.setName(""); // NOI18N
        opozorila.setPreferredSize(new java.awt.Dimension(320, 48));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(opozorila, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(shrani)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(preklici)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shrani)
                    .addComponent(preklici))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(opozorila, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel5.setAlignmentX(0.0F);
        jPanel5.setAlignmentY(0.0F);

        ime_kriptovaluta.setText("Kriptovaluta:");
        ime_kriptovaluta.setPreferredSize(new java.awt.Dimension(63, 26));

        vlozek_tekst.setText("Vlozena kolicina (v fiat valuti):");
        vlozek_tekst.setPreferredSize(new java.awt.Dimension(99, 26));

        kolicina_tekst.setText("Kolicina zakupljene kriptovalute:");
        kolicina_tekst.setPreferredSize(new java.awt.Dimension(99, 26));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ime_kriptovaluta, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vlozek_tekst, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kolicina_tekst, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ime_kriptovaluta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vlozek_tekst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kolicina_tekst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(114, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        kriptovaluta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "EUR - Euro (€)", "USD - Ameriški dolar ($)", "GBP - Britanski funt (£)" }));

        vlozek.setPreferredSize(new java.awt.Dimension(74, 26));
        vlozek.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                vlozekKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                vlozekKeyTyped(evt);
            }
        });

        kolicina.setPreferredSize(new java.awt.Dimension(74, 26));
        kolicina.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                kolicinaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                kolicinaKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(kriptovaluta, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(vlozek, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(kolicina, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(kriptovaluta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vlozek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kolicina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel5.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void vlozekKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_vlozekKeyTyped
        //checkIntegrity();
    }//GEN-LAST:event_vlozekKeyTyped

    private void kolicinaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_kolicinaKeyTyped
        //checkIntegrity();
//        switch(checkIntegrity()){
//            case 0:
//                System.out.println("Ni napak");
//                break;
//            case 1:
//                System.out.println("Napaka pri obeh");
//                break;
//            case 2:
//                System.out.println("Napaka pri kolicini");
//                break;
//            case 3:
//                System.out.println("Napaka pri vlozku");
//                break;
//            case 4:
//                System.out.println("UBER NAPAKA");
//                break;
//            default:
//                System.out.println("UBER NAPAKA 2");
//        }
    }//GEN-LAST:event_kolicinaKeyTyped

    private void kolicinaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_kolicinaKeyReleased
        checkIntegrity();
    }//GEN-LAST:event_kolicinaKeyReleased

    private void vlozekKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_vlozekKeyReleased
        checkIntegrity();
    }//GEN-LAST:event_vlozekKeyReleased

    public void usodnaNapaka(Exception e) {

        JOptionPane optionPane = new JOptionPane("Opa! Nekaj je šlo hudo narobe! Stabilnost seje se je porušila. "
                + "Kriptomer se bo interno znova zagnal! V primeru persistente napake ročno znova zaženite aplikacijo "
                + "oz. zavrzite konfiguracijsko datoteko.\n\n" + e.getMessage(), JOptionPane.ERROR_MESSAGE);
        JDialog dialog = optionPane.createDialog("USODNA NAPAKA");
        dialog.setAlwaysOnTop(true);
        dialog.setVisible(true);

        Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, e);

        Dimension d = new java.awt.Dimension(1080, 750);
        Point p = new java.awt.Point(10, 10);

        MainWindow ma;
        try {
            ma = new MainWindow(d, p);
            ma.restartKriptomer(false);
        } catch (IOException | InterruptedException | InvocationTargetException ex) {
            Logger.getLogger(AddProfile.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    // Preverjamo integriteto vrednostih ki jih je vnesel uporabnik.
    // Vse vrednosti morajo biti Double.
    private boolean checkIntegrity(){
        //JTextField kolicina = this.kolicina;
        //JTextField vlozek = this.vlozek;
        String kolicina_ = kolicina.getText(); // Najprej vnosa pretvorimo v String
        String vlozek_ = vlozek.getText();
        boolean indikator = true;
        opozorila.setText("");
        vlozek.setBackground(Color.white);
        kolicina.setBackground(Color.white);
        
        if(vlozek_.contains("f") || vlozek_.contains("d")){ // Preverimo če vnost vsebuje "f" ali "d". Java še zmeraj lahko parsa vrednosti ki vsebujejo f ali d (ker je kao float in double) v double
            vlozek_ += "abc"; //da v naslednjih pogojih namerno pade test, ki preverja če je vrednost double
        }
        if(kolicina_.contains("f") || kolicina_.contains("d")){
            kolicina_ += "abc"; //da v naslednjih pogojih namerno pade test, ki preverja če je vrednost double
        }
        
        try{ // Poiskus parsanja v Double. V kolikor pade vemo, da je vnos napačen
            shrani.setEnabled(true); // v kolikor je vnos vredu je gumb za shranjevanje odklenjen
            Double v = Double.parseDouble(vlozek_);
            System.out.println("INPUT OK (v)");
        }
        catch(NumberFormatException e){
            vlozek.setBackground(Color.red);
            shrani.setEnabled(false); // če je vnost napečn se shrani zaklene
            if (vlozek_.equals("")){
                //opozorila.setText("Prosim vnesite številčno vrednost v polje Vložek.");
                System.out.println("NO INPUT (v)");
            }
            else{
                //opozorila.setText("<html>Vnos ni veljaven v polju Vložek. <br/>Prosim vnesite številčno vrednost v polje Vložek.</html>");
                System.out.println("INVALID INPUT (v)");
            }
            indikator = false;
        }
        
        try{ // Enako kot zgoraj
            shrani.setEnabled(true);
            Double k = Double.parseDouble(kolicina_);
            System.out.println("INPUT OK (k)");
        }
        catch(NumberFormatException e){
            kolicina.setBackground(Color.red);
            shrani.setEnabled(false);
            if (kolicina_.equals("")){
                //opozorila.setText("Prosim vnesite številčno vrednost v polje Količina.");
                System.out.println("NO INPUT (k)");
            }
            else{
                //opozorila.setText("<html>Vnos ni veljaven v polju Količina. <br/>Prosim vnesite številčno vrednost v polje Količina.</html>");
                System.out.println("INVALID INPUT (k)");
            }
            indikator = false;
        }
        
        return indikator; // true -> ni napak; false -> napaka
        
    }
    
    private void shraniActionPerformed(java.awt.event.ActionEvent evt) {
        
        if(!checkIntegrity()){ // preden shranimo preverimo integriteto
            System.out.println("ne bo šlo"); // debug. returna v glavnem
            return;
        } 
        
        JSONParser jsonParser = new JSONParser(); // nov parser

        try {
            FileReader reader = new FileReader("kriptomer.conf"); // odpremo konfiguracijsko datoteko

            Object obj = jsonParser.parse(reader);
            JSONObject saved = (JSONObject) obj; // parsamo in shranimo vsebino datoteke v json object spremenljivko

            System.out.println(saved); //debug
            
            JSONArray profili = (JSONArray) saved.get("profili"); // pomikanje po shranjenih podatkih. pridobimo vse profile
            int index_profila = Integer.parseInt(saved.get("default_profil").toString()); // pridobimo index trenutnego izbranega profila
            JSONObject profil = (JSONObject) profili.get(index_profila); // pridobimo trenuten profil
            JSONArray valute = (JSONArray) profil.get("valute"); // pridobimo valute v tem profilu
            
            String izbrana_valuta = kriptovaluta.getItemAt(kriptovaluta.getSelectedIndex());
            izbrana_valuta = izbrana_valuta.toLowerCase().substring(0, 3);
            
            double izbran_vlozek = Double.parseDouble(vlozek.getText());
            double izbrana_kolicina = Double.parseDouble(kolicina.getText());
               
            for (int i = 0; i < valute.size(); i++){
                JSONObject a = (JSONObject) valute.get(i);
                if (izbrana_valuta.equals(a.get("valuta"))){
                    return;
                    
                    // Kle bi sicer te vprašal če hočeš podvojeno valuto vnest 
                    // sam bi blo preveč handlanja konfliktov tk da je za v bk
                    
                    /*
                    UIManager.put("OptionPane.noButtonText", "Ne");
                    UIManager.put("OptionPane.yesButtonText", "Da");
                    int reply = JOptionPane.showConfirmDialog(null, "Ta kriptovaluta je že v uporabi. A ste prepričati da želite ustvariti" +
                            " vnos podvojene kriptovalute in ne urediti obstoječo?", "Poziv: Podvojena kriptovauta", JOptionPane.YES_NO_OPTION);
                    if (reply == JOptionPane.NO_OPTION) 
                        return;
                    */
                }
            }
            
            JSONObject nova_valuta = new JSONObject(); // ustvarimno novo valuto z itbranimi lastnostmi in vrednostmi
            nova_valuta.put("valuta", izbrana_valuta);
            nova_valuta.put("vlozek", izbran_vlozek);
            nova_valuta.put("kolicina", izbrana_kolicina);
                        
            valute.add(nova_valuta); // dodamo valuto v array valute
            
            profil.replace("valute", valute); // zamenjema array valute z novim/posodobljenim
            profili.remove(index_profila); // odstranimo star profil
            profili.add(index_profila, profil); // na isto mesto postavimo naovega/posodobljenega
            
            saved.put("profili", profili); // zamenjamo objekt profili z novim
            
            FileWriter newfile = new FileWriter("kriptomer.conf"); // nov filewriter
            newfile.write(saved.toJSONString()); // pišemo na disk
            newfile.flush(); // tudi pišem. shranimo?
            
            System.out.println("    ... finished"); // debug
            
            JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(jPanel3); // pridobimo trenutni Jframe in ga zapremo
            frame.dispose();
            
            this.mainWindow.restartKriptomer(true); // funkcija, da se kriptomer ponovno zažene (na istem mestu)
            
            Thread.currentThread().stop(); // konec niti
            
        } catch (java.io.FileNotFoundException e) {
            System.out.println("> profile loading error\n    ... FileNotFound Excpetion");
            usodnaNapaka(e);
        } catch (java.io.IOException e) {
            System.out.println(">> profile loading error\n    ... IO Excpetion");
            usodnaNapaka(e);
        } catch (ParseException e) {
            System.out.println(">> profile loading error\n    ... Parsing Error. Corrupt File?");
            usodnaNapaka(e);
        }
        
    }

    private void prekliciActionPerformed(java.awt.event.ActionEvent evt) {                                         
        
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(jPanel3);
        frame.dispose();
        Thread.currentThread().stop();
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ime_kriptovaluta;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JTextField kolicina;
    private javax.swing.JLabel kolicina_tekst;
    private javax.swing.JComboBox<String> kriptovaluta;
    private javax.swing.JLabel naslov;
    private javax.swing.JLabel opozorila;
    private javax.swing.JButton preklici;
    private javax.swing.JButton shrani;
    private javax.swing.JTextField vlozek;
    private javax.swing.JLabel vlozek_tekst;
    // End of variables declaration//GEN-END:variables
}
