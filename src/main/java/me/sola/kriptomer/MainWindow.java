/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package me.sola.kriptomer;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.LayoutStyle;
import javax.swing.SwingUtilities;
import static me.sola.kriptomer.MainWindow.addValuteArray;

import org.json.simple.*;
//import org.json.simple.parser.JSONParser;
//import org.json.simple.parser.ParseException;
import com.google.gson.*;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.Formatter;
import java.util.Locale;
import java.util.Objects;
import javax.imageio.ImageIO;
import javax.swing.AbstractButton;
import javax.swing.ButtonModel;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JRadioButtonMenuItem;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author TheGoodSpice
 */
public class MainWindow extends javax.swing.JFrame {

    /*
     * Global vars
     */
    /**
     * Creates new form MainWindow
     */
    private final javax.swing.ButtonGroup profili;
    
    public MainWindow(Dimension d, Point p) throws IOException, InterruptedException, InvocationTargetException {
        initComponents();

        // "Ročno" popravljeni atributi in GUI stvari (ker NetBeans nima podpore ali ne deluje pravilno)
        JPanel panel = (JPanel) kriptoBox.getParent();
        panel.remove(kriptoBox);
        panel.revalidate();
        panel.repaint();

        profili = new javax.swing.ButtonGroup();

        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(panel1);
        Image ikona = ImageIO.read(RunKriptomer.class.getResource("resources/icons/ikona1.png"));
        frame.setIconImage(ikona);
        
        frame.setSize(d);
        frame.setLocation(p);

        panel1.setBorder(BorderFactory.createLineBorder(Color.black));
        panel2.setBorder(BorderFactory.createLineBorder(Color.black));
        naslovnica.setBorder(BorderFactory.createLineBorder(Color.black));

//        dodajValuto.setIcon(new ImageIcon("src/main/java/me/sola/kriptomerresources/menu_icons/add_thumb.png"));
//        odstraniValuto.setIcon(new ImageIcon("src/main/java/me/sola/kriptomerresources/menu_icons/delete_thumb.png"));
//        urediValuto.setIcon(new ImageIcon("src/main/java/me/sola/kriptomerresources/menu_icons/edit_thumb.png"));
        dodajValuto.setIcon(new ImageIcon(this.getClass().getResource("resources/menu_icons/add_thumb.png")));
        odstraniValuto.setIcon(new ImageIcon(this.getClass().getResource("resources/menu_icons/delete_thumb.png")));
        urediValuto.setIcon(new ImageIcon(this.getClass().getResource("resources/menu_icons/edit_thumb.png")));

        for(int i = 0; i < 10; i++){
            //addKriptoBox("t", 10.0, 10.0, "e");
        }
        
        
        //
        profileHandler();

        valuteHandler();

        adaptSizeChange();
        //refreshHandler("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        naslovnica = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        panel1 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        valuteBoxScroll = new javax.swing.JScrollPane();
        valuteBox = new javax.swing.JPanel();
        kriptoBox = new javax.swing.JPanel();
        icon = new javax.swing.JLabel();
        name = new javax.swing.JLabel();
        amount = new javax.swing.JLabel();
        dot = new javax.swing.JLabel();
        price = new javax.swing.JLabel();
        worth = new javax.swing.JLabel();
        trend = new javax.swing.JLabel();
        trend_icon = new javax.swing.JLabel();
        profit = new javax.swing.JLabel();
        panel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        menu = new javax.swing.JMenuBar();
        portfelj = new javax.swing.JMenu();
        dodajValuto = new javax.swing.JMenuItem();
        urediValuto = new javax.swing.JMenu();
        test1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        odstraniValuto = new javax.swing.JMenuItem();
        profil = new javax.swing.JMenu();
        spremeniProfil = new javax.swing.JMenu();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        dodajProfil = new javax.swing.JMenuItem();
        odstraniProfil = new javax.swing.JMenuItem();
        seja = new javax.swing.JMenu();
        restart = new javax.swing.JMenuItem();
        osveziConfig = new javax.swing.JMenuItem();
        pomoc = new javax.swing.JMenu();
        zacnimo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kriptomer - Avtor: Tilen Levak");
        setMinimumSize(new java.awt.Dimension(360, 300));
        setPreferredSize(new java.awt.Dimension(1080, 750));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });

        naslovnica.setMinimumSize(new java.awt.Dimension(480, 60));
        naslovnica.setPreferredSize(new java.awt.Dimension(1080, 60));

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel3.setText("Kriptomer  -  Vloži že danes in mogoče boš bogat čez 15 let! ");

        jLabel4.setFont(new java.awt.Font("Dialog", 2, 8)); // NOI18N
        jLabel4.setText("\"Denar, če vam že ne bo prinesel sreče, vam bo vsaj pomagal, da boste nesrečni v lagodju.\" - Helen Gurley Brown ");

        javax.swing.GroupLayout naslovnicaLayout = new javax.swing.GroupLayout(naslovnica);
        naslovnica.setLayout(naslovnicaLayout);
        naslovnicaLayout.setHorizontalGroup(
            naslovnicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(naslovnicaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(naslovnicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addContainerGap(435, Short.MAX_VALUE))
        );
        naslovnicaLayout.setVerticalGroup(
            naslovnicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(naslovnicaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jLabel4))
        );

        getContentPane().add(naslovnica, java.awt.BorderLayout.NORTH);

        panel1.setAlignmentX(0.0F);
        panel1.setAlignmentY(0.0F);
        panel1.setPreferredSize(new java.awt.Dimension(530, 720));
        panel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(530, 20));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Moje Kriptovalute");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(398, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 1, Short.MAX_VALUE))
        );

        panel1.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        valuteBox.setForeground(new java.awt.Color(160, 163, 65));
        valuteBox.setLayout(new javax.swing.BoxLayout(valuteBox, javax.swing.BoxLayout.LINE_AXIS));

        kriptoBox.setBackground(new java.awt.Color(214, 217, 223));
        kriptoBox.setForeground(new java.awt.Color(60, 63, 65));
        kriptoBox.setMaximumSize(new java.awt.Dimension(32767, 68));
        kriptoBox.setMinimumSize(new java.awt.Dimension(100, 68));
        kriptoBox.setPreferredSize(new java.awt.Dimension(100, 68));

        icon.setBackground(new java.awt.Color(60, 63, 64));
        icon.setForeground(new java.awt.Color(80, 80, 80));
        icon.setText("jLabel4");
        icon.setPreferredSize(new java.awt.Dimension(56, 56));

        name.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        name.setForeground(new java.awt.Color(60, 63, 65));
        name.setText("Bitcoin");
        name.setMaximumSize(null);
        name.setMinimumSize(null);

        amount.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        amount.setForeground(new java.awt.Color(60, 63, 65));
        amount.setText("0.00012345");

        dot.setForeground(new java.awt.Color(60, 63, 65));
        dot.setText("•");
        dot.setToolTipText("");

        price.setForeground(new java.awt.Color(60, 63, 65));
        price.setText("€40,000.00");

        worth.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        worth.setForeground(new java.awt.Color(60, 63, 65));
        worth.setText("€420.69");

        trend.setForeground(new java.awt.Color(60, 63, 65));
        trend.setText("10%");

        trend_icon.setText("jLabel12");
        trend_icon.setMaximumSize(new java.awt.Dimension(16, 16));
        trend_icon.setMinimumSize(new java.awt.Dimension(16, 16));
        trend_icon.setPreferredSize(new java.awt.Dimension(16, 16));

        profit.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        profit.setForeground(new java.awt.Color(160, 163, 165));
        profit.setText("(+€7.21)");

        javax.swing.GroupLayout kriptoBoxLayout = new javax.swing.GroupLayout(kriptoBox);
        kriptoBox.setLayout(kriptoBoxLayout);
        kriptoBoxLayout.setHorizontalGroup(
            kriptoBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kriptoBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(icon, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(kriptoBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kriptoBoxLayout.createSequentialGroup()
                        .addComponent(amount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dot, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(price)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 260, Short.MAX_VALUE)
                        .addComponent(trend_icon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(trend))
                    .addGroup(kriptoBoxLayout.createSequentialGroup()
                        .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(kriptoBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(worth, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(profit, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        kriptoBoxLayout.setVerticalGroup(
            kriptoBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kriptoBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kriptoBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kriptoBoxLayout.createSequentialGroup()
                        .addGroup(kriptoBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(kriptoBoxLayout.createSequentialGroup()
                                .addGroup(kriptoBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(worth, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kriptoBoxLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(profit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(kriptoBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(amount)
                            .addComponent(dot)
                            .addComponent(price)
                            .addComponent(trend)
                            .addComponent(trend_icon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(icon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        valuteBox.add(kriptoBox);

        valuteBoxScroll.setViewportView(valuteBox);

        panel1.add(valuteBoxScroll, java.awt.BorderLayout.CENTER);

        getContentPane().add(panel1, java.awt.BorderLayout.WEST);

        panel2.setAlignmentX(0.0F);
        panel2.setAlignmentY(0.0F);
        panel2.setPreferredSize(new java.awt.Dimension(530, 720));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Grafi");
        jLabel2.setAlignmentY(0.0F);

        javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
        panel2.setLayout(panel2Layout);
        panel2Layout.setHorizontalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(505, 505, 505))
        );
        panel2Layout.setVerticalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(panel2, java.awt.BorderLayout.CENTER);

        portfelj.setText("Portfelj");

        dodajValuto.setText("Dodaj novo valuto");
        dodajValuto.setEnabled(false);
        portfelj.add(dodajValuto);

        urediValuto.setText("Uredi obstoječo valuto");
        urediValuto.setEnabled(false);

        test1.setText("test");
        test1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                test1ActionPerformed(evt);
            }
        });
        urediValuto.add(test1);

        portfelj.add(urediValuto);
        portfelj.add(jSeparator1);

        odstraniValuto.setText("Odstrani obstoječo valuto");
        odstraniValuto.setEnabled(false);
        portfelj.add(odstraniValuto);

        menu.add(portfelj);

        profil.setText("Profil");

        spremeniProfil.setText("Spremeni aktiven profil");
        profil.add(spremeniProfil);
        profil.add(jSeparator2);

        dodajProfil.setText("Ustvari nov profil");
        dodajProfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dodajProfilActionPerformed(evt);
            }
        });
        profil.add(dodajProfil);

        odstraniProfil.setText("Odstrani obstoječi profil");
        profil.add(odstraniProfil);

        menu.add(profil);

        seja.setText("Seja");
        seja.setToolTipText("");

        restart.setText("Ponovno zaženi Kriptomer");
        restart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartActionPerformed(evt);
            }
        });
        seja.add(restart);

        osveziConfig.setText("Osveži konfiguracijske podatke");
        osveziConfig.setToolTipText("Če ste spreminjali podatke konfiguracijske datoteke med delovanjem aplikacije in želite videti spremembe je potrebno da program osveži le te.");
        osveziConfig.setEnabled(false);
        seja.add(osveziConfig);

        menu.add(seja);

        pomoc.setText("Pomoč");

        zacnimo.setText("Pa začnimo...");
        zacnimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zacnimoActionPerformed(evt);
            }
        });
        pomoc.add(zacnimo);

        menu.add(pomoc);

        setJMenuBar(menu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void usodnaNapaka(Exception e){
        
        JOptionPane optionPane = new JOptionPane("Opa! Nekaj je šlo hudo narobe! Stabilnost seje se je porušila. " +
                "Kriptomer se bo interno znova zagnal! V primeru persistente napake ročno znova zaženite aplikacijo " + 
                "oz. zavrzite konfiguracijsko datoteko.\n\n" + e.getMessage() + "\n\n" + e, JOptionPane.ERROR_MESSAGE);    
            JDialog dialog = optionPane.createDialog("USODNA NAPAKA");
            dialog.setAlwaysOnTop(true);
            dialog.setVisible(true);
            
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, e);
            
            restartKriptomer(false);
        
    }
    
    private void profileHandler() throws IOException, InterruptedException, InvocationTargetException {

        JSONParser jsonParser = new JSONParser();

        try {
            FileReader reader = new FileReader("kriptomer.conf");

            Object obj = jsonParser.parse(reader);
            JSONObject saved = (JSONObject) obj;

            System.out.println(saved);
            System.out.println("> nalaganje profila");

            int profil = Integer.parseInt(saved.get("default_profil").toString());

            selectProfile(profil, saved);
        } catch (java.io.FileNotFoundException e) {
            System.out.println("> profile loading error\n    ... no file found");
            System.out.println("> creating default profiles file");

            // glavni -> profili, 2 profila (1 in 2)
            JSONArray profili = new JSONArray();
            JSONObject profil1 = new JSONObject();
            JSONObject profil2 = new JSONObject();

            // valuti 1 in 2 v profil 1
            JSONObject valuta1 = new JSONObject();
            valuta1.put("valuta", "btc");
            valuta1.put("vlozek", 25.0);
            //valuta1.put("kolicina", 0.00131779);
            valuta1.put("kolicina", 0.00123321);

            JSONObject valuta2 = new JSONObject();
            valuta2.put("valuta", "eth");
            valuta2.put("vlozek", 10.0);
            //valuta2.put("kolicina", 0.00994653);
            valuta2.put("kolicina", 0.00987789);

            JSONArray array_valut1 = new JSONArray();
            array_valut1.add(valuta1);
            array_valut1.add(valuta2);

            // valuti 3 in 4 v profil 2
            JSONObject valuta3 = new JSONObject();
            valuta3.put("valuta", "btc");
            valuta3.put("vlozek", 15.0);
            valuta3.put("kolicina", 0.00123456);

            JSONObject valuta4 = new JSONObject();
            valuta4.put("valuta", "eth");
            valuta4.put("vlozek", 20.0);
            valuta4.put("kolicina", 0.00654321);

            JSONArray array_valut2 = new JSONArray();
            array_valut2.add(valuta3);
            array_valut2.add(valuta4);

            // profil 1
            profil1.put("ime", "Moj EUR Profil");
            profil1.put("fiat", "eur");
            profil1.put("valute", array_valut1);

            // profil 2
            profil2.put("ime", "Moj USD Profil");
            profil2.put("fiat", "usd");
            profil2.put("valute", array_valut2);

            profili.add(profil1);
            profili.add(profil2);

            // bundle
            JSONObject bundle = new JSONObject();
            bundle.put("profili", profili);
            bundle.put("default_profil", 0);

            FileWriter newfile = new FileWriter("kriptomer.conf");
            //We can write any JSONArray or JSONObject instance to the file
            newfile.write(bundle.toJSONString());
            newfile.flush();
            System.out.println("    ... finished");

            JOptionPane.showMessageDialog(null, "Zdravo naivni *ahem* nov uporabnik. Opazili smo, "
                    + "da ni konfiguracijske datoteke (kriptomer.conf) in smo za "
                    + "vas ustvarili novo z dvema privzetima profiloma. V kolikor "
                    + "že imate to datoteko jo zamenjajte po želji.");

            profileHandler();
        } catch (java.io.IOException e) {
            System.out.println("> profile loading error\n    ... IO Excpetion");
            usodnaNapaka(e);
        } catch (ParseException e) {
            System.out.println("> profile loading error\n    ... Parsing Error. Corrupt File?");
            usodnaNapaka(e);
        }

    }

    private void selectProfile(int profil_index, JSONObject json) throws InterruptedException, InvocationTargetException {
        
        JRadioButtonMenuItem j;
        for (int i = 0; i < spremeniProfil.getMenuComponents().length; i++){
            j = (JRadioButtonMenuItem) spremeniProfil.getMenuComponent(i);
            j.setSelected(false);
            spremeniProfil.removeAll();
        }

        JSONArray profili = (JSONArray) json.get("profili");
        
        JSONObject profil = null;
        
        try{
            profil = (JSONObject) profili.get(profil_index);
        }
        catch(IndexOutOfBoundsException e){
            System.out.println("> profile loading error\n    ... No profiles.");
            usodnaNapaka(e);
        }

        for (int i = 0; i < profili.size(); i++) {
            JSONObject profil_ = (JSONObject) profili.get(i);
            String ime_ = profil_.get("ime").toString();
            boolean selected = false;
            if (profil_index == i) {
                selected = true;
            }

            addProfileToMenu(ime_, i, selected);
        }

        String ime_profila = profil.get("ime").toString();
        String fiat = profil.get("fiat").toString();

        JSONArray valute = (JSONArray) profil.get("valute");

        for (int i = 0; i < valute.size(); i++) {
            JSONObject obj = (JSONObject) valute.get(i);
            String valuta = obj.get("valuta").toString();
            Double vlozek = Double.parseDouble(obj.get("vlozek").toString());
            Double kolicina = Double.parseDouble(obj.get("kolicina").toString());

            addKriptoBox(valuta, vlozek, kolicina, fiat);
        }

        //System.out.println("Profil -> " + profil.get(profil_index));

    }

    private void addProfileToMenu(String ime_profila, int index, boolean selected) {

        System.out.println("addProfileToMenu -> " + ime_profila + " " + index + " " + selected);
        
        JRadioButtonMenuItem novProfil = new javax.swing.JRadioButtonMenuItem();
        novProfil.setSelected(selected);
        novProfil.setText(ime_profila);
        spremeniProfil.add(novProfil);
        profili.add(novProfil);
        
        spremeniProfil.getMenuComponents();
        System.out.println("velikost spremeniProfil " + spremeniProfil.getMenuComponents().length);
        
        novProfil.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    spremeniAktivniProfil(index);
                } catch (IOException | ParseException | InterruptedException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private void spremeniAktivniProfil(int index) throws IOException, ParseException, InterruptedException {

        JSONParser jsonParser = new JSONParser();

        FileReader reader = null;
        try {
            reader = new FileReader("kriptomer.conf");
        } catch (FileNotFoundException e) {
            System.out.println("> profile loading error\n    ... FileNotFound Excpetion");
            usodnaNapaka(e);
        }

        Object obj = jsonParser.parse(reader);
        JSONObject saved = (JSONObject) obj;

        saved.put("default_profil", index);
        FileWriter newfile = new FileWriter("kriptomer.conf");
        //We can write any JSONArray or JSONObject instance to the file
        newfile.write(saved.toJSONString());
        newfile.flush();

        JPanel j;
        for (int i = 0; i < valuteBox.getComponents().length; i++) {
            j = (JPanel) valuteBox.getComponent(i);
            valuteBox.remove(j);
        }
        
        //for(int i = 0; i < valuteBox.getCompon)
        System.out.println("velikost valuteBox-a " + valuteBox.getComponents().length); 

        restartKriptomer(true);
         
    }
    
    private Point getWindowLocation(){
        
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(panel1);
        Point location = frame.getLocation();
        
        return location;
    
    }
    
    private Dimension getWindowSize(){
        
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(panel1);
        Dimension size = frame.getSize();
        
        return size;
        
    }

    private void refreshHandler(String valuta, String fiat, Double investicija) {

        Runnable auto_refresh = new Runnable() {
            public void run() {
                try {
                    refreshData(valuta, fiat, investicija);
                } catch (URISyntaxException e) {
                    System.out.println(e);
                }
            }
        };
        Thread t = new Thread(null, auto_refresh, "Background");
        t.start();

    }

    public static int[] addToArray(int arr[], int x) {
        int n = arr.length;
        int newarr[] = new int[n + 1];

        for (int i = 0; i < n; i++) {
            newarr[i] = arr[i];
        }

        newarr[n] = x;
        return newarr;
    }

    public static JPanel[] addValuteArray(JPanel arr[], JPanel x) {
        int n = arr.length;
        JPanel newarr[] = new JPanel[n + 1];

        for (int i = 0; i < n; i++) {
            newarr[i] = arr[i];
        }

        newarr[n] = x;
        return newarr;
    }

    int[] valute = {};
    JPanel[] valute_paneli = {};

    private void valuteHandler() {
//        try {
//
//            addKriptoBox("btc", 11.0, 0.2);
//        } catch (InterruptedException ex) {
//            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (InvocationTargetException ex) {
//            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    // Samodejna 
    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        adaptSizeChange();
    }//GEN-LAST:event_formComponentResized

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        adaptSizeChange();
    }//GEN-LAST:event_formWindowStateChanged

    private void restartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartActionPerformed
        restartKriptomer(false);
    }//GEN-LAST:event_restartActionPerformed

    public void restartKriptomer(boolean keepProperties){
        
        try {
            System.out.println("X X X X X X\n> Kriptomer se ponovno zaganja\nX X X X X X");
            
            if(keepProperties){
                Dimension d = getWindowSize();
                Point p = getWindowLocation();
                RunKriptomer.main(d, p);
            }
            else{
                String[] arguments = new String[] {"123"};
                RunKriptomer.main(arguments);
            }
            
            JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(panel1);
            frame.dispose();
            Thread.currentThread().stop();
            
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void zacnimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zacnimoActionPerformed
        System.out.println("> Odpiram pomoč");
        JFrame f = new JFrame();

        JLabel lab1 = new JLabel("Pomoči ni!");
        f.setSize(new java.awt.Dimension(720, 480));
        f.getContentPane().add(lab1);
        f.repaint();
        f.revalidate();

        f.setVisible(true);
    }//GEN-LAST:event_zacnimoActionPerformed

    private void test1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_test1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_test1ActionPerformed

    private void dodajProfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dodajProfilActionPerformed
        
        AddProfile a = new AddProfile();
        a.setVisible(true);
        
    }//GEN-LAST:event_dodajProfilActionPerformed

    private void adaptSizeChange() {//java.awt.event.ComponentEvent evt){
        //JFrame f5 = (JFrame) SwingUtilities.getRootPane(panel1).getParent();
        //System.out.println(f5);
        JFrame topFrame = (JFrame) SwingUtilities.getWindowAncestor(panel1);
        //System.out.println(topFrame);
        int frame_h = topFrame.getBounds().height;
        int frame_w = topFrame.getBounds().width;

        panel1.setPreferredSize(new Dimension((frame_w / 3) - 10, frame_h));
        panel2.setPreferredSize(new Dimension(((frame_w / 3) * 2) - 10, frame_h));

        int scroll_h = valuteBox.getHeight();
        int scroll_w = valuteBox.getWidth();
        //valuteBox.setPreferredSize(valuteBox.getPreferredSize());
        //valuteBox.setPreferredSize(new Dimension(valuteBox.getPreferredSize().width, valuteBoxScroll.getPreferredSize().height));
        //valuteBoxScroll.setPreferredSize(new Dimension(valuteBoxScroll.getPreferredSize().width, 100));

        valuteBox.validate();
        //valuteBox.repaint();
        //System.out.println(valuteBoxScroll.getSize());
    }

    /**
     * @param d
     * @param p
     */
    public static void main(Dimension d, Point p) {

        System.out.println("STARTING MainWindow");
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainWindow(d, p).setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InterruptedException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InvocationTargetException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

//    private boolean listsDone = false;
//
//    boolean getListsDone() {
//        return listsDone;
//    }
    
    private void addKriptoBox(String cryptoCurrency, Double cryptoVlozek, Double cryptoAmount, String fiat) throws InterruptedException, InvocationTargetException {

//        try {
//            refreshData();
//        } catch (IOException ex) {
//            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
//        }
        System.out.println("> adding new KriptoBox ...");

        // Nov ExecutorService ki poskrbi da nit konča z nalogo preden nadaljujemo z 
        ExecutorService es = Executors.newCachedThreadPool();
        es.execute(new Runnable() {

            @Override
            public void run() {
                System.out.println("    ...zaganjanje nove niti");

                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {

                        System.out.println("    ...dodajanje nove valute");

                        // Prevajalna tabela
                        String cryptoName;
                        String base_path = "resources/thumbs/";
                        String iconPath;
                        switch (cryptoCurrency) {
                            case "btc":
                                cryptoName = "Bitcoin";
                                iconPath = base_path + "bitcoin.png";
                                break;
                            case "eth":
                                cryptoName = "Ethereum";
                                iconPath = base_path + "ethereum.png";
                                break;
                            case "bch":
                                cryptoName = "Bitcoin Cash";
                                iconPath = base_path + "bitcoin_cash.png";
                                //iconPath = base_path + "bitcoin.png";
                                break;
                            case "xrp":
                                cryptoName = "Ripple";
                                iconPath = base_path + "ripple.png";
                                //iconPath = base_path + "bitcoin.png";
                                break;
                            case "ltc":
                                cryptoName = "Litecoin";
                                iconPath = base_path + "litecoin.png";
                                //iconPath = base_path + "bitcoin.png";
                                break;
                            case "xlm":
                                cryptoName = "Stellar Lumens";
                                iconPath = base_path + "stellar_lumens.png";
                                //iconPath = base_path + "bitcoin.png";
                                break;
                            case "omg":
                                cryptoName = "OMG Network";
                                iconPath = base_path + "omg_network.png";
                                //iconPath = base_path + "bitcoin.png";
                                break;
                            case "zrx":
                                cryptoName = "0x";
                                iconPath = base_path + "zerox.png";
                                //iconPath = base_path + "bitcoin.png";
                                break;
                            default:
                                cryptoName = "Neznan: " + cryptoCurrency;
                                iconPath = base_path + "neznan.png";
                        }

                        JPanel kriptoBox = new javax.swing.JPanel();
                        JLabel icon = new javax.swing.JLabel();
                        JLabel name = new javax.swing.JLabel();
                        JLabel amount = new javax.swing.JLabel();
                        JLabel dot = new javax.swing.JLabel();
                        JLabel price = new javax.swing.JLabel();
                        JLabel worth = new javax.swing.JLabel();
                        JLabel trend = new javax.swing.JLabel();
                        JLabel trend_icon = new javax.swing.JLabel();
                        JLabel profit = new javax.swing.JLabel();

                        //ImageIcon imageIcon = new ImageIcon("src/main/java/me/sola/kriptomerresources/trend/up2.png"); // load the image to a imageIcon
                        ImageIcon imageIcon = new ImageIcon(this.getClass().getResource("resources/trend/up2.png")); // load the image to a imageIcon
                        Image image = imageIcon.getImage(); // transform it 
                        Image newimg = image.getScaledInstance(10, 10, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                        ImageIcon newimg1 = new ImageIcon(newimg);  // transform it back

                        trend_icon.setIcon(newimg1);

                        //System.out.println("iconPath " + iconPath);
                        ImageIcon imageIcon2;
                        try {
                            imageIcon2 = new ImageIcon(this.getClass().getResource(iconPath)); // load the image to a imageIcon
                        } catch (Exception e) {
                            imageIcon2 = new ImageIcon(this.getClass().getResource("resources/thumbs/neznan.png")); // load the image to a imageIcon
                        }
                        Image image2 = imageIcon2.getImage(); // transform it 
                        Image newimg2 = image2.getScaledInstance(56, 56, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                        ImageIcon newimg12 = new ImageIcon(newimg2);  // transform it back
                        icon.setIcon(newimg12);

//                        icon.setText("ikona");
//                        icon.setPreferredSize(new java.awt.Dimension(42, 42));
//
//                        name.setText(cryptoName);
//
//                        amount.setText("0.00012345");
//
//                        worth.setText(cryptoWorth);
//
//                        trend.setText("10%");
//
//                        trend_icon.setText("movement");
//                        trend_icon.setPreferredSize(new java.awt.Dimension(10, 10));
                        kriptoBox.setBackground(new java.awt.Color(214, 217, 223));
                        kriptoBox.setForeground(new java.awt.Color(60, 63, 65));
                        kriptoBox.setMaximumSize(new java.awt.Dimension(32767, 58));
                        kriptoBox.setMinimumSize(new java.awt.Dimension(100, 56));
                        kriptoBox.setPreferredSize(new java.awt.Dimension(100, 56));

                        icon.setBackground(new java.awt.Color(60, 63, 64));
                        icon.setForeground(new java.awt.Color(80, 80, 80));
                        //icon.setText("ikona");
                        icon.setPreferredSize(new java.awt.Dimension(56, 56));

                        name.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
                        name.setForeground(new java.awt.Color(60, 63, 65));
                        name.setText(cryptoName);
                        name.setMaximumSize(null);
                        name.setMinimumSize(null);

                        amount.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
                        amount.setForeground(new java.awt.Color(60, 63, 65));
                        amount.setText("" + cryptoAmount);

                        dot.setForeground(new java.awt.Color(60, 63, 65));
                        dot.setText("•");
                        dot.setToolTipText("");

                        price.setForeground(new java.awt.Color(60, 63, 65));
                        price.setText("€--,---.--");

                        worth.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
                        worth.setForeground(new java.awt.Color(60, 63, 65));
                        worth.setText("€--.--");

                        trend.setForeground(new java.awt.Color(60, 63, 65));
                        trend.setText("--%");

                        //trend_icon.setText("trend_icon");
                        trend_icon.setMaximumSize(new java.awt.Dimension(16, 16));
                        trend_icon.setMinimumSize(new java.awt.Dimension(16, 16));
                        trend_icon.setPreferredSize(new java.awt.Dimension(16, 16));

                        kriptoBox.setMaximumSize(new java.awt.Dimension(2000, 68));
                        kriptoBox.setMinimumSize(new java.awt.Dimension(100, 68));

                        valuteBox.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
                        
                        valuteBox.setSize(valuteBox.getPreferredSize().width, valuteBox.getPreferredSize().height);
                        
                        //kriptoBox.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));

                        profit.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
                        profit.setForeground(new java.awt.Color(160, 163, 165));
                        profit.setText("(+€-.--)");

                        javax.swing.GroupLayout kriptoBoxLayout = new javax.swing.GroupLayout(kriptoBox);
                        kriptoBox.setLayout(kriptoBoxLayout);
                        kriptoBoxLayout.setHorizontalGroup(
                                kriptoBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(kriptoBoxLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(icon, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(kriptoBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(kriptoBoxLayout.createSequentialGroup()
                                                                .addComponent(amount)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(dot, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(price)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 260, Short.MAX_VALUE)
                                                                .addComponent(trend_icon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(trend))
                                                        .addGroup(kriptoBoxLayout.createSequentialGroup()
                                                                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addGroup(kriptoBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(profit, javax.swing.GroupLayout.Alignment.TRAILING)
                                                                        .addComponent(worth, javax.swing.GroupLayout.Alignment.TRAILING))))
                                                .addContainerGap())
                        );
                        kriptoBoxLayout.setVerticalGroup(
                                kriptoBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(kriptoBoxLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(kriptoBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(kriptoBoxLayout.createSequentialGroup()
                                                                .addGroup(kriptoBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(kriptoBoxLayout.createSequentialGroup()
                                                                                .addGroup(kriptoBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                        .addComponent(worth, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                .addGap(0, 0, Short.MAX_VALUE))
                                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kriptoBoxLayout.createSequentialGroup()
                                                                                .addGap(0, 0, Short.MAX_VALUE)
                                                                                .addComponent(profit)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                                                .addGroup(kriptoBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(amount)
                                                                        .addComponent(dot)
                                                                        .addComponent(price)
                                                                        .addComponent(trend)
                                                                        .addComponent(trend_icon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                        .addComponent(icon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addContainerGap()
                                        )
                        );

                        valuteBox.add(kriptoBox);

                        valuteBoxScroll.setViewportView(valuteBox);

                        panel1.add(valuteBoxScroll, java.awt.BorderLayout.CENTER);

                        getContentPane().add(panel1, java.awt.BorderLayout.WEST);

                        panel2.setAlignmentX(0.0F);
                        panel2.setAlignmentY(0.0F);
                        panel2.setPreferredSize(new java.awt.Dimension(530, 720));

                        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
                        jLabel2.setText("Grafi");
                        jLabel2.setAlignmentY(0.0F);

                        javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
                        panel2.setLayout(panel2Layout);
                        panel2Layout.setHorizontalGroup(
                                panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(panel2Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(505, 505, 505))
                        );
                        panel2Layout.setVerticalGroup(
                                panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(panel2Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jLabel2)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        );

                        valuteBox.setBackground(new Color(0xbb, 0xbb, 0xbb));

                        //Dodaj v parent box
                        javax.swing.GroupLayout valuteBoxLayout = new javax.swing.GroupLayout(valuteBox);
                        valuteBox.setLayout(valuteBoxLayout);
                        valuteBox.setLayout(new BoxLayout(valuteBox, BoxLayout.Y_AXIS));
                        valuteBoxLayout.setHorizontalGroup(
                                valuteBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(valuteBoxLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(kriptoBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addContainerGap())
                        );
                        valuteBoxLayout.setVerticalGroup(
                                valuteBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(valuteBoxLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(kriptoBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(576, Short.MAX_VALUE))
                        );

                        // Presledek med box-i
                        JPanel gapPanel = new javax.swing.JPanel();
                        gapPanel.setMaximumSize(new java.awt.Dimension(0, 5));
                        gapPanel.setMinimumSize(new java.awt.Dimension(0, 5));
                        valuteBox.add(gapPanel);

                        valute_paneli = addValuteArray(valute_paneli, kriptoBox);

                        System.out.println("...ustvarjanje novega panela " + cryptoName + " koncano");

                        //System.out.println(valute_paneli[valute.length-1]);
                        //frame.revalidate();
                        //frame.repaint();
//                        synchronized (this) {
//                            listsDone = true;
//                            notifyAll();
//                        }
                    }

                });
            }

        });
        //es.shutdown();
        //boolean finished = es.awaitTermination(1, TimeUnit.MINUTES);

//        System.out.println("0");
//        synchronized (es) {
//            System.out.println("1");
//            if (!getListsDone()) {
//                System.out.println("2");
//                try {
//                    es.wait();
//                } catch (InterruptedException e) {
//                    System.out.println("X");
//                    // handle it somehow
//                }
//            }
//        }
        //System.out.println("    ...nit terminirana");
        adaptSizeChange();

        // indeks števila valut
        valute = addToArray(valute, valute.length);
        System.out.println("> Novo število valut: " + valute_paneli.length);

        // nova valuta (ime)
        String cryptoName_ = cryptoCurrency + " ID: " + valute.length;

        // zajemanje glavnega okna
        //final JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(panel1);
        // log
        System.out.println("    ...dodan KriptoBox " + cryptoName_);

        refreshHandler(cryptoCurrency, fiat, cryptoVlozek);

    }

    // LEGACY BEGIN
    int refreshRate = 10;

    private void refreshDataOld() throws MalformedURLException, IOException, InterruptedException {
        while (true) {
            try {
                System.out.println("> Osvezevanje podatkov... \n    ...stevilo valut nacrtovanih za osvezevanje: " + valute_paneli.length + "");
                for (int i = 0; i < valute.length; i++) {
                    Component[] comp = valute_paneli[i].getComponents();
                    //System.out.println(comp[1]);
                    var worth = (JLabel) comp[5];

                    String api_url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=eur";

                    URL url = new URL(api_url);

                    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                    conn.setRequestMethod("GET");
                    conn.connect();

                    String inline = "";
                    Scanner scanner = new Scanner(url.openStream());

                    //Write all the JSON data into a string using a scanner
                    while (scanner.hasNext()) {
                        inline += scanner.nextLine();
                    }

                    //Close the scanner
                    scanner.close();

                    //Using the JSON simple library parse the string into a json object
                    String json = inline;
                    JsonObject response = new JsonParser().parse(json).getAsJsonObject();
                    //System.out.println(response);

                    JsonObject odg = (JsonObject) response.get("bitcoin");
                    String wrth = odg.get("eur").getAsString();

                    //System.out.println(wrth);
                    worth.setText("€" + wrth);
                }
            } catch (Exception e) {
                //handle
            }
            Thread.sleep(refreshRate * 1000);
        }
    }

    // LEGACY END
    private void refreshData(String valuta, String fiat, Double investicija) throws URISyntaxException {
        System.out.println("...Osvezevanje (Websocket)");
        try {
            // open websocket
            final BitStampWebsocket clientEndPoint = new BitStampWebsocket(new URI("wss://ws.bitstamp.net"));

            clientEndPoint.valuta = valuta;
            clientEndPoint.fiat = fiat;
            //clientEndPoint.addValutaInFiat("btc", "eur");

            clientEndPoint.connect();

            // add listener
            clientEndPoint.addMessageHandler(new BitStampWebsocket.MessageHandler() {
                public void handleMessage(String message, String valuta) {
                    //System.out.println(message);
                    try {
                        JsonObject json = new JsonParser().parse(message).getAsJsonObject();
                        JsonObject data = (JsonObject) json.get("data");
                        JsonElement price = (JsonElement) data.get("price");
                        StringBuilder sb = new StringBuilder();
                        Formatter nf = new Formatter(sb, Locale.US);
                        String output = "" + nf.format("%(,.2f", price.getAsDouble());
                        System.out.println("> " + valuta + ": " + output);
                        updateData(price.getAsDouble() + "", valuta, investicija);
                    } catch (Exception e) {
                        System.out.println("> Recieved data: not data\n    -> " + message);
                        //throw new RuntimeException(e);
                    }

                }
            });

            // send message to websocket
            //clientEndPoint.send("{'event':'addChannel','channel':'ok_btccny_ticker'}");
            // wait 5 seconds for messages from websocket
            //Thread.sleep(5000);
        } catch (URISyntaxException e) {
            System.err.println("URISyntaxException exception: " + e.getMessage());
            usodnaNapaka(e);
        }

    }

    /*
    comp[0] : icon
    comp[1] : amount (0.001)
    comp[2] : dot
    comp[3] : price
    comp[4] : trend_icon
    comp[5] : trend
    comp[6] : name
    comp[7] : profit
    comp[8] : worth
     */
    //Double investicijaTest = 25.00;
    Double[] prev_prices = new Double[10];

    private void updateData(String price, String valuta, Double investicija) {

        switch (valuta) {
            case "btc":
                valuta = "Bitcoin";
                break;
            case "eth":
                valuta = "Ethereum";
                break;
            case "bch":
                valuta = "Bitcoin Cash";
                break;
            case "xrp":
                valuta = "Ripple";
                break;
            case "ltc":
                valuta = "Litecoin";
                break;
            case "xlm":
                valuta = "Stellar Lumens";
                break;
            case "omg":
                valuta = "OMG Network";
                break;
            case "zrx":
                valuta = "0x";
                break;
            default:
                valuta = "Neznano";
        }
        for (int i = 0; i <= valute.length - 1; i++) {
            Component[] comp = valute_paneli[i].getComponents();//System.out.println(comp[1]);
            var name = (JLabel) comp[6];
            String name_ = name.getText();

            if (name_.equals(valuta)) {
                // Nastavi ceno 1 kovanca
                var price_ = (JLabel) comp[3];
                StringBuilder sb = new StringBuilder();
                Formatter nf = new Formatter(sb, Locale.US);
                String output = nf.format("%(,.2f", Double.parseDouble(price)) + "";
                price_.setText("€" + output);

                // Nastavi vrednost valute v €
                sb.setLength(0);
                var amount_ = (JLabel) comp[1];
                Double worth1 = Double.parseDouble(amount_.getText());
                worth1 = (worth1 * 100) * Double.parseDouble(price) / 100;
                output = nf.format("%(,.2f", worth1) + "";
                var worth_ = (JLabel) comp[8];
                worth_.setText("€" + output);

                // Nastavi profit/izgubo v €
                sb.setLength(0);
                var profit_ = (JLabel) comp[7];
                Double profit1 = worth1 - investicija;
                Double temp_profit1 = Math.abs(profit1);
                output = nf.format("%(,.2f", temp_profit1) + "";
                if (profit1 >= 0) {
                    profit_.setText("(+€" + output + ")");
                } else {
                    profit_.setText("(-€" + output + ")");
                }

                // Nastavi profit/izgubo v %
                sb.setLength(0);
                var trend_ = (JLabel) comp[5];
                Double trend1 = Math.abs(((worth1 - investicija) * 100) / investicija);
                output = nf.format("%(,.2f", trend1) + "";
                if (investicija < worth1) {
                    trend_.setText("+" + output + "%");
                } else if (Objects.equals(investicija, worth1)) {
                    trend_.setText("" + output + "%");
                } else {
                    trend_.setText("-" + output + "%");
                }

                var trend_icon_ = (JLabel) comp[4];
                //
                //ImageIcon imageIcon = new ImageIcon("src/main/java/me/sola/kriptomerresources/trend/up2.png"); // load the image to a imageIcon
                ImageIcon imageIcon = new ImageIcon(this.getClass().getResource("resources/trend/up2.png"));   // load the image to a imageIcon
                Image image = imageIcon.getImage(); // transform it 
                image = image.getScaledInstance(10, 10, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                ImageIcon bullish = new ImageIcon(image);  // transform it back
                //
                imageIcon = new ImageIcon(this.getClass().getResource("resources/trend/down2.png")); // load the image to a imageIcon
                image = imageIcon.getImage(); // transform it 
                image = image.getScaledInstance(10, 10, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                ImageIcon bearish = new ImageIcon(image);  // transform it back
                //
                if ((worth1 - investicija) > 0) {
                    trend_icon_.setIcon(bullish);
                } else if ((worth1 - investicija) < 0) {
                    trend_icon_.setIcon(bearish);
                } else {
                    trend_icon_.setIcon(null);
                }

                // Pridobitev prejšnje cene
                Double prev_price = Double.parseDouble(price);
                try {
                    if (prev_prices[i] != null) {
                        prev_price = prev_prices[i];
                    } else {
                        prev_price = Double.parseDouble(price);
                    }
                } catch (java.lang.NullPointerException e) {
                    // PAČ
                }

                // Določanje če je trenutna cena višja od prejšnje
                Boolean is_profit;
                if (Double.parseDouble(price) > prev_price) {
                    is_profit = true;
                } else if (Double.parseDouble(price) == prev_price) {
                    is_profit = true;
                } else {
                    is_profit = false;
                }

                // Obarvanje cene ipd. ko je cena višja od prejšnje cene
                if (is_profit) {
                    Thread one = new Thread() {
                        public void run() {
                            try {
                                price_.setForeground(new java.awt.Color(38, 106, 255));
                                worth_.setForeground(new java.awt.Color(38, 106, 255));
                                profit_.setForeground(new java.awt.Color(38, 106, 255));
                                trend_.setForeground(new java.awt.Color(38, 106, 255));
                                Thread.sleep(1000);
                                price_.setForeground(new java.awt.Color(60, 63, 65));
                                worth_.setForeground(new java.awt.Color(60, 63, 65));
                                profit_.setForeground(new java.awt.Color(160, 163, 165));
                                trend_.setForeground(new java.awt.Color(60, 63, 65));
                            } catch (InterruptedException ex) {
                                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    };
                    one.start();
                } else {
                    Thread barvaj = new Thread() {
                        public void run() {
                            try {
                                price_.setForeground(new java.awt.Color(249, 76, 255));
                                worth_.setForeground(new java.awt.Color(249, 76, 255));
                                profit_.setForeground(new java.awt.Color(249, 76, 255));
                                trend_.setForeground(new java.awt.Color(249, 76, 255));
                                Thread.sleep(1000);
                                price_.setForeground(new java.awt.Color(60, 63, 65));
                                worth_.setForeground(new java.awt.Color(60, 63, 65));
                                profit_.setForeground(new java.awt.Color(160, 163, 165));
                                trend_.setForeground(new java.awt.Color(60, 63, 65));
                            } catch (InterruptedException ex) {
                                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    };
                    barvaj.start();
                }

                prev_prices[i] = Double.parseDouble(price);
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel amount;
    private javax.swing.JMenuItem dodajProfil;
    private javax.swing.JMenuItem dodajValuto;
    private javax.swing.JLabel dot;
    private javax.swing.JLabel icon;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPanel kriptoBox;
    private javax.swing.JMenuBar menu;
    private javax.swing.JLabel name;
    private javax.swing.JPanel naslovnica;
    private javax.swing.JMenuItem odstraniProfil;
    private javax.swing.JMenuItem odstraniValuto;
    private javax.swing.JMenuItem osveziConfig;
    private javax.swing.JPanel panel1;
    private javax.swing.JPanel panel2;
    private javax.swing.JMenu pomoc;
    private javax.swing.JMenu portfelj;
    private javax.swing.JLabel price;
    private javax.swing.JMenu profil;
    private javax.swing.JLabel profit;
    private javax.swing.JMenuItem restart;
    private javax.swing.JMenu seja;
    private javax.swing.JMenu spremeniProfil;
    private javax.swing.JMenuItem test1;
    private javax.swing.JLabel trend;
    private javax.swing.JLabel trend_icon;
    private javax.swing.JMenu urediValuto;
    private javax.swing.JPanel valuteBox;
    private javax.swing.JScrollPane valuteBoxScroll;
    private javax.swing.JLabel worth;
    private javax.swing.JMenuItem zacnimo;
    // End of variables declaration//GEN-END:variables
}
